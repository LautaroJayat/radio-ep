<div class="dashboard-control">
    <div class="ck-editor-dash">
        <h2 class="Udatos-title">Editar Emisión</h2>
        <div class="n-form">
            <input type="hidden" name="id" id="_id" value="{{emition._id}}">
            <label for="url">Escriba la URL de la noticia</label>
            <input id="url" class="n-input" type="text" name="url" value="{{emition.url}}"
                placeholder="Escriba la URL de la noticia">
            <label for="title">Escriba su título</label>

            <input id="title" class="n-input" type="text" name="title" placeholder="Escriba un título"
                value="{{emition.title}}">
            <label for="description">Escriba una descripción para su emisión</label>

            <textarea id="description" class="n-input-textarea" type="text" name="description"
                placeholder="Escriba una descripción">{{emition.description}}</textarea>
            <label for="iframe">Inserte el iframe de su emisión</label>
            <input id="iframe" class="n-input" type="text" name="iframe" placeholder="Inserte el Iframe de Youtube"
                value="{{emition.iframe}}">
            <label for="program">Escriba el nombre del programa</label>
            <input id="program" class="n-input" type="text" name="program" placeholder="Inserte el nombre del programa"
                value="{{emition.program}}">

            <textarea class="photo-input" name="content" id="editor">{{emition.body}}</textarea>
            <input type="hidden" id="thumbnail" name="thumbnail" value="{{emition.thumbnail}}">
            <button onclick="openCropper()" style="background-color: rgb(255, 0, 106);" class="B-B-Submit-block">BUSCAR
                IMAGEN</button>

            <div class="result-container">
                <div id="img-preview-container" class="img-preview-container">
                </div>
            </div>
            <button id='sendEditorData' class=" B-B-Submit-block">EDITAR EMISIÓN</button>
        </div>
    </div>
</div>



<script>

    // Declaring basic elements to interact with
    const CROPPER_RATIO = 1;
    const front_url = document.getElementById('url');
    const title = document.getElementById('title');
    const description = document.getElementById('description');
    const program = document.getElementById('program');
    const iframe = document.getElementById('iframe');
    const senderButton = document.getElementById('sendEditorData');
    const emitionId = document.getElementById('_id');
    var thumbnailBinaryData;

    //  Creating a CKEDITOR instance only when everithing is loaded
    window.onload = () => {

        const BlogEditor = CKEDITOR.replace('editor', {
            width: '100%',
            height: '75vh',
            embed_provider: '//ckeditor.iframe.ly/api/oembed?url={url}&callback={callback}',
            extraPlugins: 'embed,autoembed,image2',
            removeButtons: 'Source,Save,Templates,NewPage,Preview,Print,PasteText,Find,Replace,SelectAll,Form,Checkbox,Radio,TextField,Textarea,Select,Button,HiddenField,Subscript,Superscript,CopyFormatting,RemoveFormat,NumberedList,BulletedList,Outdent,Indent,CreateDiv,BidiLtr,BidiRtl,Language,Anchor,Flash,Table,HorizontalRule,SpecialChar,PageBreak,Font,FontSize,TextColor,BGColor,ShowBlocks,About,Styles'

        });

        const DescriptionEditor = CKEDITOR.replace('description', {
            width: '100%',
            height: '25vh',
            removePlugins: "dialogui,dialog,a11yhelp,about,bidi,blockquote,clipboard," +
                "button,panelbutton,panel,colorbutton,colordialog,menu," +
                "contextmenu,dialogadvtab,div,elementspath,enterkey,entities,popup," +
                "filebrowser,find,fakeobjects,flash,listblock,richcombo," +
                "font,format,forms,horizontalrule,htmlwriter,iframe,image,indent," +
                "indentblock,indentlist,justify,link,list,liststyle" +
                "maximize,newpage,pagebreak,pastefromword,pastetext,preview,print," +
                "removeformat,resize,save,scayt,selectall,showblocks," +
                "showborders,smiley,sourcearea,specialchar,stylescombo,tab,table," +
                "tabletools,templates,undo,spellchecker",
            removeDialogTabs: 'link:advanced, spellchecker',
            removeButtons: 'others,spellchecker,clipboard,Source,Save,Templates,NewPage,Preview,Print,Cut,Paste,PasteText,PasteFromWord,Undo,Redo,Find,Replace,SelectAll,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Subscript,Superscript,CopyFormatting,RemoveFormat,NumberedList,BulletedList,Outdent,Indent,Blockquote,CreateDiv,JustifyCenter,JustifyLeft,JustifyRight,JustifyBlock,BidiLtr,BidiRtl,Language,Anchor,Unlink,Link,Image,Flash,Table,HorizontalRule,Smiley,SpecialChar,Iframe,PageBreak,Styles,Format,Font,FontSize,TextColor,BGColor,ShowBlocks,Maximize,About,Scayt',
        });

    }

    senderButton.addEventListener('click', function (e) {
        e.preventDefault();
        let dataLength = CKEDITOR.instances.editor.getData();
        dataLength = dataLength.length;
        if (title.value.length < 7) {
            alert("El título debe tener al menos 7 carácteres de largo");
        }
        else if (dataLength < 60) {
            alert("El cuerpo de la noticia es demasiado corto");
        } else {
            sendToServer();
        }

    });


    // Opening the cropper pushing it to the front    
    function openCropper() {
        document.getElementById('cropper-div').style.left = '0';
    }

    // Setting the SENDER BUTTON
    async function sendToServer() {
        if (binaryData) {
            let imgPreview = document.getElementById('preview-image');
            let littleCanvas = await document.createElement('canvas');
            littleCanvas.height = 350;
            littleCanvas.width = 350;
            littleCanvasCTX = littleCanvas.getContext('2d');
            littleCanvasCTX.drawImage(imgPreview, 0, 0, 350, 350);
            littleCanvas.toBlob((blob) => {
                thumbnailBinaryData = blob;
                appendingDataIntoFormAndFetchingToServer();
            }, 'image/jpeg');
        } else {
            appendingDataIntoFormAndFetchingToServer();
        }
    }

    async function appendingDataIntoFormAndFetchingToServer() {
        let body = await CKEDITOR.instances.editor.getData();
        let description = await CKEDITOR.instances.description.getData();
        var form = new FormData();
        form.append('url', front_url.value);
        form.append('title', title.value);
        form.append('description', description);
        form.append('body', body);
        form.append('program', program.value);
        form.append('iframe', iframe.value);
        if (binaryData) {
            var name = new Date();
            name = name.getTime();
            name = name.toString();
            form.append('image', thumbnailBinaryData, name + "small.jpeg");
            fetch(`/emitions/fulledit/${emitionId.value}`, { method: "POST", body: form })
                .then(function (response) {
                    console.log(response.status);
                    if (response.status === 201) {
                        console.log("done");
                        window.location.assign("/admin/profile");
                    } else if (response.status === 999) {
                        console.log(response);
                        var error_m = document.createElement('div');
                        error_m.classList.add('error_div');
                        var error_p = document.createTextNode('El link de youtube debe ser sólo un fucking link de youtube!');
                        error_m.appendChild(error_p);
                        document.body.appendChild(error_m);
                        const x = document.querySelectorAll(".error_div");
                        for (let i = 0; i < x.length; i++) {
                            for (i = 0; i < x.length; i++) {
                                x[i].addEventListener("click", (target) => {
                                    target.path[1].removeChild(target.path[0]);
                                });
                            }
                        }
                    } else if (response.status === 999) {
                        console.log(response);
                        var error_m = document.createElement('div');
                        error_m.classList.add('error_div');
                        var error_p = document.createTextNode('Recuerda que la URL debe contener sólo letras, números y usar guiones en vez de espacios');
                        error_m.appendChild(error_p);
                        document.body.appendChild(error_m);
                        const x = document.querySelectorAll(".error_div");
                        for (let i = 0; i < x.length; i++) {
                            for (i = 0; i < x.length; i++) {
                                x[i].addEventListener("click", (target) => {
                                    target.path[1].removeChild(target.path[0]);
                                });
                            }
                        }
                    } else {
                        window.location.assign("/");
                    }
                })
                .catch(function (err) {
                    console.log(err);
                });
        }
        if (!binaryData) {
            form.append('thumbnail', thumbnail.value);
            fetch(`/emitions/partialedit/${emitionId.value}`, { method: "POST", body: form })
                .then(function (response) {
                    console.log(response.status);
                    if (response.status === 201) {
                        console.log("done");
                        window.location.assign("/admin/profile");
                    } else if (response.status === 999) {
                        console.log(response);
                        var error_m = document.createElement('div');
                        error_m.classList.add('error_div');
                        var error_p = document.createTextNode('Recuerda que la URL debe contener sólo letras, números y usar guiones en vez de espacios');
                        error_m.appendChild(error_p);
                        document.body.appendChild(error_m);
                        const x = document.querySelectorAll(".error_div");
                        for (let i = 0; i < x.length; i++) {
                            for (i = 0; i < x.length; i++) {
                                x[i].addEventListener("click", (target) => {
                                    target.path[1].removeChild(target.path[0]);
                                });
                            }
                        }
                    } else {
                        window.location.assign("/");
                    }
                })
                .catch(function (err) {
                    console.log(err);
                });
        }

    }

</script>
